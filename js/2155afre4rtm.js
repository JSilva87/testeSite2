import * as THREE from './three.module.js';import { OrbitControls } from './OrbitControls.js';import { Reflector } from './Reflector.js';import { MTLLoader } from './MTLLoader.js';import { OJSLoader } from './OJSLoader.js';var container, controls;var camera, scene, renderer;init();animate();function init() {container =document.getElementById('Container1');document.body.appendChild( container );renderer = new THREE.WebGLRenderer({ antialias: true });renderer.setPixelRatio( window.devicePixelRatio );renderer.setSize( window.innerWidth, window.innerHeight );renderer.shadowMap.enabled = true;renderer.domElement.style.position = "relative";container.appendChild( renderer.domElement );camera = new THREE.PerspectiveCamera( 30, window.innerWidth / window.innerHeight, 1, 1000 );camera.position.set( -5, 1, 0 );
controls = new OrbitControls( camera, container );controls.maxPolarAngle = 0.45*Math.PI;controls.minDistance = 4.0;controls.maxDistance = 10.0;controls.enablePan=false;scene = new THREE.Scene();scene.background = new THREE.Color( 0xffffff );var light = new THREE.DirectionalLight( 0xFFFFFF, 0.5 );light.position.set( -10, 15, 6 );light.target.position.set( 0, 0, 0 );light.castShadow=true;light.shadow.mapSize.width = 1024;light.shadow.mapSize.height = 1024;var d = 1.0;light.shadow.camera.left = - d;light.shadow.camera.right = d;light.shadow.camera.top = d;light.shadow.camera.bottom = - d;light.shadow.camera.near = 1;light.shadow.camera.far = 25;scene.add( light );scene.add( new THREE.AmbientLight( 0xffffff ,1.0) );var gg = new THREE.CircleBufferGeometry( 16, 64);var gm = new THREE.MeshPhongMaterial( { color: 0xE5E5E5,opacity: 0.98,transparent:true} );
var ground = new THREE.Mesh( gg, gm );ground.receiveShadow = true;ground.position.y = -0.5;ground.rotateX( - Math.PI / 2 );scene.add(ground);var geometry = new THREE.PlaneBufferGeometry( 6, 6 );var groundMirror = new Reflector( geometry, {clipBias: 0.003,textureWidth: window.innerWidth * window.devicePixelRatio,textureHeight: window.innerHeight * window.devicePixelRatio,recursion: 1} );groundMirror.position.y = -0.505;groundMirror.rotateX( - Math.PI / 2 );scene.add( groundMirror );var onProgress = function ( xhr ) {if ( xhr.lengthComputable ) {var percentComplete = xhr.loaded / xhr.total * 100;}};var onError = function () { };var manager = new THREE.LoadingManager();new MTLLoader( manager ).setPath( 'models/' ).load( 'testeBox.mtl', function ( materials ) {materials.preload();new OJSLoader( manager )
.setMaterials( materials ).setPath( 'models/' ).load( 'testeBox.ojs', function ( object ) {object.traverse( function ( child ) {if ( child instanceof THREE.Mesh ) {child.castShadow=true;};} );object.scale.set( 0.5, 0.5, 0.5 );object.position.y = 0.2;scene.add( object );}, onProgress, onError );} );window.addEventListener( 'resize', resize, false );}function resize() {camera.aspect = window.innerWidth / window.innerHeight;camera.updateProjectionMatrix();renderer.setSize( window.innerWidth, window.innerHeight );}function animate() {controls.update();requestAnimationFrame( animate );renderer.render( scene, camera );}
